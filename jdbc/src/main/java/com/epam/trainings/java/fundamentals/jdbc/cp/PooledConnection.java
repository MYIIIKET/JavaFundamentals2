package com.epam.trainings.java.fundamentals.jdbc.cp;import java.sql.Connection;import java.sql.SQLException;import java.util.concurrent.BlockingQueue;public class PooledConnection implements ConnectionWrapper {    private Connection connection;    @Override    public Connection toSrc() {        return connection;    }    private BlockingQueue<Connection> connectionQueue;    private BlockingQueue<Connection> givenAwayConQueue;    public PooledConnection(Connection connection,                            BlockingQueue<Connection> connectionQueue,                            BlockingQueue<Connection> givenAwayConQueue) throws SQLException {        this.connection = connection;        this.connectionQueue = connectionQueue;        this.givenAwayConQueue = givenAwayConQueue;        this.connection.setAutoCommit(true);    }    public void reallyClose() throws SQLException {        connection.close();    }    @Override    public void close() throws SQLException {        if (connection.isClosed()) {            throw new SQLException("Attempting to close closed connection.");        }        if (connection.isReadOnly()) {            connection.setReadOnly(false);        }        if (!givenAwayConQueue.remove(this)) {            throw new SQLException("Error deleting connection from the given away connections pool.");        }        if (!connectionQueue.offer(this)) {            throw new SQLException("Error allocating connection in the pool.");        }    }}